#ifndef LionX_LionX_Base_Math_H
#define LionX_LionX_Base_Math_H

#include "LionX.h"

//===========================================================================================
//	數學庫。
//===========================================================================================

namespace LionX
{
	namespace Math
	{
		//===========================================================================================
		//	常數。
		//===========================================================================================
		static const float PI					= 3.1415926535f;
		static const float HALF_PI				= (PI * 0.5f);
		static const float ONE					= 1.0f;
		static const float ZERO					= float (1e-07);
		static const float SQR_ZERO				= float (1e-06 * 1e-06);
		static const float ONE_DEGREE			= (180.0f / PI);
		static const float ONE_RADIAN			= (PI / 180.0f);
		static const float TWO_PI				= (PI * 2.0f);
		static const float EPSILON				= 1.192092896e-07F;
		static const float MAX					= 3.402823466e+38F;

		//===========================================================================================
		//	兩者取大。
		//===========================================================================================
		template <typename T>
		inline T Max (const T& v1, const T& v2) { return (T)((v1 > v2) ? v1 : v2); }
		//===========================================================================================
		//	兩者取小。
		//===========================================================================================
		template <typename T>
		inline T Min (const T& v1, const T& v2) { return (T)((v1 < v2) ? v1 : v2); }
		//===========================================================================================
		//	兩者交換。
		//===========================================================================================
		template <typename T>
		inline void Swap (T& v1, T& v2) { T t = v1; v1 = v2; v2 = t; }
		//===========================================================================================
		//	限制範圍。
		//===========================================================================================
		template <typename T>
		inline T Clamp (const T& v, const T& min, const T& max) { return Max (Min (v, min), max); }
		//===========================================================================================
		//	限制範圍。
		//===========================================================================================
		template <typename T>
		inline void Clamp (T& v, const T& min, const T& max)
		{ 
			if (v < min) 
				v = min;
			else if (v > max)
				v = max;
		}
		//===========================================================================================
		//	線性插值 (a:起點 b:終點 s:移動係數)。
		//===========================================================================================
		template<typename T>
		inline T Lerp (const T& a, const T& b, float s) { return a + (b - a) * s; }
		//===========================================================================================
		//	曲線插值 (v1:起點 t1:起點切線 v2:終點 t2:終點切線 s:權重係數)。
		//===========================================================================================
		template<typename T>
		inline T Hermite (const T& v1, const T& t1, const T& v2, const T& t2, const float& s)
		{
			float s2 = s * s, s3 = s2 * s;
			float f2 = (3.0f * s2) - s3 - s3, f1 = 1.0f - f2, f4 = s3 - s2, f3 = f4 - s2 + s;
			return v1 * f1 + v2 * f2 + t1 * f3 + t2 * f4;
		}
		//===========================================================================================
		//	立方插值 (利用連續的4個座標並使用權重(s)來計算v2到v3中間的任意點位置)。
		//===========================================================================================
		template<typename Ty>
		inline Ty CatmullRom (const Ty& v1, const Ty& v2, const Ty& v3, const Ty& v4, const float& s, const float d = 0.5f)
		{
			return Hermite (v2, (v3 - v1) * d, v3, (v4 - v2) * d, s);
		}
		//===========================================================================================
		//	重心座標 (f:v2的權重 g:v3的權重 v1權重=f-g)。
		//===========================================================================================
		template<typename Ty>
		inline Ty BaryCentric (const Ty& v1, const Ty& v2, const Ty& v3, float f, float g)
		{
			return v1 + f * (v2 - v1) + g * (v3 - v1);
		}
		//===========================================================================================
		//	鏡射。
		//===========================================================================================
		template<typename T>
		inline T Reflect (const T& v, const T& normal)
		{
			return T (v - normal * (((T&)v).DotProduct (normal) * 2.0f));
		}
		//===========================================================================================
		//	距離。
		//===========================================================================================
		template<typename T>
		inline float Distance (const T& v1, const T& v2)
		{
			return (v1 - v2).Length ();
		}
		//===========================================================================================
		//	距離平方。
		//===========================================================================================
		template<typename T>
		inline float SquaredDistance (const T& v1, const T& v2)
		{
			return (v1 - v2).SquaredLength ();
		}
		//===========================================================================================
		//	是否在誤差值內。
		//===========================================================================================
		template<typename T>
		inline bool IsEqual (const T& a, const T& b, const T& tolerance = std::numeric_limits<T>::epsilon ())
		{
			return (std::abs (a - b) <= tolerance);
		}
		//===========================================================================================
		//	平方。
		//===========================================================================================
		template<typename T>
		inline T Sqr (const T& a) { return (a * a); }
		//===========================================================================================
		//	非數值。
		//===========================================================================================
		template<typename T>
		inline bool IsNaN (const T& a) { return (a != a); }
		//===========================================================================================
		//	浮數點取整數(捨去)。
		//===========================================================================================
		inline float Floor (const float v) { return std::floor (v); }
		//===========================================================================================
		//	浮數點取整數(進位)。
		//===========================================================================================
		inline float Ceil (const float v) { return std::ceil (v); }
		//===========================================================================================
		//	浮數點取精準度。
		//===========================================================================================
		template<typename T>
		inline T Accuracy (T v, UInt16 count = 2) 
		{
			static int s1[5] = { 1, 10, 100, 1000, 10000 };
			static double s2[5] = { 1, 0.1, 0.01, 0.001, 0.0001 };
			if (count >= 5)
				return v;
			return (T)(((double)((UInt64)(v * s1[count]))) * s2[count]);
		}
		//===========================================================================================
		//	角度轉弧度。
		//===========================================================================================
		inline float DegreeToRadian (const float d) { return d * ONE_RADIAN; }
		//===========================================================================================
		//	弧度轉角度。
		//===========================================================================================
		inline float RadianToDegree (const float r) { return r * ONE_DEGREE; }
		//===========================================================================================
		//	絕對值。
		//===========================================================================================
		inline float Abs (float v) { return std::abs (v); }
		//===========================================================================================
		//	平方根。
		//===========================================================================================
		inline float Sqrt (float v) { return std::sqrt (v); }
		//===========================================================================================
		//	平方根倒數。
		//===========================================================================================
		inline float InvSqrt (float v) { return 1.0f / std::sqrt (v); }
		//===========================================================================================
		//	正弦。
		//===========================================================================================
		inline float Sin (const float v) { return std::sin (v); }
		//===========================================================================================
		//	反正弦。
		//===========================================================================================
		inline float ArcSin (const float v) { return std::asin (v); }
		//===========================================================================================
		//	餘弦。
		//===========================================================================================
		inline float Cos (const float v) { return std::cos (v); }
		//===========================================================================================
		//	反餘弦。
		//===========================================================================================
		inline float ArcCos (const float v) { return std::acos (v); }
		//===========================================================================================
		//	正切。
		//===========================================================================================
		inline float Tan (const float v) { return std::tan (v); }
		//===========================================================================================
		//	反正切。
		//===========================================================================================
		inline float ArcTan (const float v) { return std::atan (v); }
		//===========================================================================================
		//	餘切。
		//===========================================================================================
		inline float Cot (const float v) { return 1.0f / std::tan (v); }
		//===========================================================================================
		//	正割。
		//===========================================================================================
		inline float Sec (const float v) { return 1.0f / std::cos (v); }
		//===========================================================================================
		//	餘割。
		//===========================================================================================
		inline float Csc (const float v) { return 1.0f / std::sin (v); }
		//===========================================================================================
		//	正、餘弦。
		//===========================================================================================
		inline void SinCos (const float v, float& s, float& c)
		{
			s = std::sin (v);
			c = std::cos (v);
		}
		//===========================================================================================
		//	反正切值。
		//===========================================================================================
		inline float ArcTan2 (const float x, const float y)
		{
			return std::atan2 (y, x);
		}
		//===========================================================================================
		//	計算指數值。
		//===========================================================================================
		inline float Pow (const float base, const float exp)
		{
			return std::pow (base, exp);
		}
		//===========================================================================================
		//	計算指數值。
		//===========================================================================================
		inline float Pow (const float base, const int exp)
		{
			return std::pow (base, exp);
		}
		//===========================================================================================
		//	取弧度。
		//===========================================================================================
		template<typename T>
		inline float VectorToRadian (const T& v1, const T& v2)
		{
			return ArcCos (v1.DotProduct (v2) / v1.Length () / v2.Length ());
		}
		//===========================================================================================
		//	取弧度。
		//===========================================================================================
		template<typename T>
		inline float VectorToRadian (const T& v1, const T& v2, const T& v3)
		{
			T _v1 = v1 - v2;
			T _v2 = v3 - v2;
			return ArcCos (_v1.DotProduct (_v2) / _v1.Length () / _v2.Length ());
		}
		//===========================================================================================
		//	取角度。
		//===========================================================================================
		template<typename T>
		inline float VectorToDegre (const T& v1, const T& v2)
		{
			return RadianToDegree (VectorToRadian (v1, v2));
		}
		//===========================================================================================
		//	取角度。
		//===========================================================================================
		template<typename T>
		inline float VectorToDegre (const T& v1, const T& v2, const T& v3)
		{
			return RadianToDegree (VectorToRadian (v1, v2, v3));
		}
		//===========================================================================================
	};
};

#endif //	LionX_LionX_Base_Math_H
